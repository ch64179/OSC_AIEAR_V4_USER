<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 명은 dao 와 일치하게 작성하면 됨 -->
<mapper namespace="com.aiear.dao.MenuDAO">
	
	
	<!-- 유저 프로필 정보 조회 -->
	<select id="getUserProfileInfo" parameterType="menuVO" resultType="hmap">
		SELECT t1.user_nm
			 , t1.user_code
			 , t1.user_gender
			 , t1.user_birth
			 , t1.user_img
			 , t1.icon_type
		  FROM t_user_info t1
		 WHERE 1=1
		   AND t1.user_code = #{user_code}
	</select>
	

	<!-- 가족 관계 정보 조회 -->
	<select id="getUserFamilyList" parameterType="menuVO" resultType="hmap">
	SELECT t1.seq AS family_seq
			 , t2.user_code
			 , t2.user_nm 
			 , t2.icon_type
			 , t2.user_gender
			 , t2.user_birth
			 , t1.f_user_code AS family_user_code
			 , t3.user_nm AS family_user_nm
			 , t3.icon_type AS family_icon_type
			 , t3.user_gender AS family_user_gender
			 , t3.user_birth AS family_user_birth
			 , t1.f_relation AS family_relation
		  FROM t_user_family_mapp t1
	INNER JOIN t_user_info t2
			ON t1.o_user_code = t2.user_code
	INNER JOIN t_user_info t3
			ON t1.f_user_code = t3.user_code
		 WHERE 1=1
		   AND t1.o_user_code = #{user_code}
	</select>


	<!-- 유저 상세 정보 조회 -->
	<select id="getUserDetailInfo" parameterType="menuVO" resultType="hmap">
		SELECT t1.user_id
			 , t1.user_nm
			 , t1.user_type
			 , t1.user_email
			 , t1.mobile_tel_no
			 , t1.user_desc
			 , t1.user_position
			 , t1.pwd_mdfy_dt
			 , t1.use_yn
			 , t2.cd_val AS use_yn_nm
			 , t1.gen_by
			 , t1.gen_dt
			 , t1.mdfy_by
			 , t1.mdfy_dt
			 , t1.user_code
			 , t1.user_addr
			 , t1.user_img
			 , t1.user_gender
			 , t1.user_birth
			 , t1.icon_type
		  FROM t_user_info t1
	INNER JOIN t_cm_cd t2
			ON t1.use_yn = t2.cd
		   AND t2.cat_cd = 'USER_USE_YN'
		 WHERE 1=1
		   AND t1.user_code = #{user_code}
	</select>
	
	
	<!-- 유저 닉네임 업데이트 -->
	<update id="updateUserNm" parameterType="menuVO">
		UPDATE t_user_info
		   SET mdfy_by = #{user_code}
			 , mdfy_dt = now()
			 , user_nm = #{user_nm}
		 WHERE user_code = #{user_code}
	</update>
	
	
	<!-- 유저 정보 업데이트 -->
	<update id="updateUserDetail" parameterType="menuVO">
		UPDATE t_user_info
		   SET user_gender = #{user_gender}
		   	 , user_birth = #{user_birth}
		   	 , mdfy_by = #{user_code}
			 , mdfy_dt = now()
		 WHERE user_code = #{user_code}
	</update>
	
	
	<!-- 유저 아이콘 업데이트 -->
	<update id="updateUserIcon" parameterType="menuVO">
		UPDATE t_user_info
		   SET icon_type = #{icon_type}
		   	 , mdfy_by = #{user_code}
			 , mdfy_dt = now()
		 WHERE user_code = #{user_code}
	</update>
	
	
	<!-- 유저 탈퇴 처리 -->
	<delete id="deleteUserAction" parameterType="menuVO">
		UPDATE t_user_info 
		   SET use_yn = 'N'
		 WHERE user_code = #{user_code}
	</delete>

	
	<!-- 가족 관계 정보 조회 -->
	<select id="getIndUserFamilyList" parameterType="menuVO" resultType="hmap">
		SELECT t1.seq AS family_seq
			 , t2.user_code
			 , t2.user_nm 
			 , t2.icon_type
			 , t2.user_gender
			 , t2.user_birth
			 , t1.f_user_code AS family_user_code
			 , t3.user_nm AS family_user_nm
			 , t3.icon_type AS family_icon_type
			 , t3.user_gender AS family_user_gender
			 , t3.user_birth AS family_user_birth
			 , t1.f_relation AS family_relation
		  FROM t_user_family_mapp t1
	INNER JOIN t_user_info t2
			ON t1.o_user_code = t2.user_code
	INNER JOIN t_user_info t3
			ON t1.f_user_code = t3.user_code
		 WHERE 1=1
		   AND t1.o_user_code = #{user_code}
	</select>
	
	
	<!-- 유저 가족 관계 신규등록 -->
	<insert id="insertUserFamilyMapp" parameterType="menuVO">
		INSERT INTO t_user_family_mapp (
			o_user_code
			, f_user_code
		<if test='family_relation != null and !"".equals(family_relation)'>
			, f_relation
		</if>
		) VALUES (
			#{user_code}
			, #{family_user_code}
		<if test='family_relation != null and !"".equals(family_relation)'>
			, #{family_relation}
		</if>
		)
	</insert>


	<!-- 유저 가족 관계 수정 -->
	<update id="deleteUserFamilyMapp" parameterType="menuVO">
		DELETE
		  FROM t_user_family_mapp
		 WHERE 1=1
		   AND seq = ${family_seq}
	</update>


	
	<!-- 유저 정보 업데이트 -->
<!-- 	<update id="updateUserDetail" parameterType="userInfoVO"> -->
<!-- 		UPDATE t_user_info -->
<!-- 		   SET mdfy_by = 'admin' -->
<!-- 			 , mdfy_dt = now() -->
<!-- 		<if test='user_nm != null and !"".equals(user_nm)'> -->
<!-- 			 , user_nm = #{user_nm} -->
<!-- 		</if> -->
<!-- 		<if test='mdfy_user_code != null and !"".equals(mdfy_user_code)'> -->
<!-- 			 , mdfy_user_code = #{mdfy_user_code} -->
<!-- 		</if> -->
<!-- 		<if test='user_addr != null and !"".equals(user_addr)'> -->
<!-- 			 , user_addr = #{user_addr} -->
<!-- 		</if> -->
<!-- 		<if test='img_file_byte != null and !"".equals(img_file_byte)'> -->
<!-- 			 , user_img = #{img_file_byte} -->
<!-- 		</if> -->
<!-- 		 WHERE user_code = #{user_code} -->
<!-- 	</update> -->
	
	
	
	<!-- 유저 가족 관계 수정 -->
	<update id="updateUserFamilyMapp" parameterType="userInfoVO">
		UPDATE t_user_family_mapp
		   SET o_user_code = #{user_code}
			 , f_user_code = #{family_user_code}
			 , f_relation = #{family_relation}
		 WHERE 1=1
		   AND seq = ${family_seq}
	</update>
	
	
	<!-- 유저 코드 생성 -->
	<select id="getGenUserCode" resultType="String">
		SELECT CONCAT('E-00-', LPAD(CAST(NEXTVAL('seq_user_code') AS VARCHAR), 10, '0'))
	</select>
	
	
	<!-- 회원가입(유저 정보 등록) -->
	<insert id="insertUserInfo" parameterType="userInfoVO">
		INSERT INTO t_user_info (
			user_id,
			user_nm,
			user_pwd,
			user_type,
			user_email,
			mobile_tel_no,
			use_yn,
			gen_by,
			gen_dt,
			user_code,
			kakao_yn,
			naver_yn,
			user_img,
			user_gender,
			user_birth
		) values (
			#{user_id},
			#{user_nm},
			#{user_pwd},
			'USER',
			#{user_id},
			#{mobile_tel_no},
			'Y'::bpchar,
			#{user_id},
			now(),
			#{user_code},
			#{kakao_yn},
			#{naver_yn},
			#{img_file_byte},
			#{user_gender},
			#{user_birth}
		)
	</insert>
	
	
	<!-- 유저 정보 이력적재 -->
	<insert id="insertUserHst" parameterType="userInfoVO">
		INSERT INTO t_user_info_hst (
					user_id
				  , user_nm
				  , user_pwd
				  , user_type
				  , user_email
				  , mobile_tel_no
				  , user_desc
				  , user_position
				  , pwd_mdfy_dt
				  , use_yn
				  , gen_by
				  , gen_dt
				  , mdfy_by
				  , mdfy_dt
				  , user_code
				  , kakao_yn
				  , naver_yn
				  , user_addr
				  , user_img
				  , last_login
				  , refresh_token
				  , user_gender
				  , user_birth
				  , icon_type)
			(SELECT user_id
				  , user_nm
				  , user_pwd
				  , user_type
				  , user_email
				  , mobile_tel_no
				  , user_desc
				  , user_position
				  , pwd_mdfy_dt
				  , use_yn
				  , gen_by
				  , gen_dt
				  , mdfy_by
				  , mdfy_dt
				  , user_code
				  , kakao_yn
				  , naver_yn
				  , user_addr
				  , user_img
				  , last_login
				  , refresh_token
				  , user_gender
				  , user_birth
				  , icon_type
			   FROM t_user_info
			  WHERE user_code = #{user_code})
	</insert>
	
	<!-- 유저 비밀번호 변경 -->
	<update id="updateUserChngPwd" parameterType="menuVO">
		UPDATE t_user_info
		   SET user_pwd = #{temp_pwd}
		   	 , user_salt = #{user_salt}
		 WHERE user_code = #{user_code}
	</update>
	
</mapper>
